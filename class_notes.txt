Day - 1
*******

Domain  : ECommerce


Duration : 45days + 1week


Content:


1) MEAN Stack Development

M - MongoDB

E - ExpressJS

A - Angular

N - NodeJS


2) State Management 

    NgRx Package


3) RxJS Package

    asynchronous calls


4) Single Page Applications


5) Lazy Loading & Eager Loading

6) Modules Communication

    Shared Module Communication

7) Cloud

    AWS Deployment

        Amazon Web Services

    Heroku Deployment

    CI / CD Process

    Continuous Integration and Continuous Deployment


8) 3rd party API'S Integration

    Paypal Integration

    Stripe Payment intregration

    GPay Integration

    Phonepe / Paytm Integration


9) Social Networks Integration

    Gmail

    Facebook

    Twitter


10) Design

    CSS3 Flex Box, Grid Box, RWD(Responsive Web Design)


11) Test Cases

    karma with jasmine


12) Authentication & Authorization

    JWT Integration

    bcrypt

    passportjs

    oAuth2



Day - 2
*******

    Home Screen Design
    ++++++++++++++++++

Frontend : Angular 13

Backend  : NodeJS

DataBase : MongoDB (MongoDB Atlas) (Cloud DataBase)

Rest     : ExpressJS

Cloud    : AWS


=> create the AWS Account

Link : https://portal.aws.amazon.com/billing/signup#/start


=> deploy images to AWS S3 Bucket

    Image_1 : https://ecommerce-7am.s3.us-east-2.amazonaws.com/p1.jpg

    Image_2 : https://ecommerce-7am.s3.us-east-2.amazonaws.com/p2.jpg

    Image_3 : https://ecommerce-7am.s3.us-east-2.amazonaws.com/p3.jpg

    Image_4 : https://ecommerce-7am.s3.us-east-2.amazonaws.com/p4.jpg

    Image_5 : https://ecommerce-7am.s3.us-east-2.amazonaws.com/p5.jpg

    Image_6 : https://ecommerce-7am.s3.us-east-2.amazonaws.com/p6.jpg


=> MongoDB

    - MongoDB is "NoSQL" DataBase.

    - MongoDB DataBase Supports "JSON".

    - MongoDB DataBase follows the "mongodb" protocol.

    - MongoDB DataBase by default Running on 27017 Port Number

    SQL                                                     NoSQL
************************************************************************                                                       
Ex.                                                 Ex.
    Oracle                                              MongoDB

    MySQL                                               CassandraDB

    SQLServer                                           CouchDB



DataBases                                               DataBases

Tables                                                  Collections

Primary Key                                             _id

Rows                                                    document
************************************************************************

=> create the Account with MongoDB

    Link : https://www.mongodb.com/try


=> insert images path to "mongodb" DataBase

    DataBase Name : ecommerce-7am

    Collection Name : products

    Password        : admin

    Connection URL : mongodb+srv://admin:admin@miniprojectdb.nzphu.mongodb.net/ecommerce-7am?retryWrites=true&w=majority


Day - 3
*******

    prepare backend application, connect to mongodb DataBase and Fetch the data from DataBase

=> create the folder

    Ex.
        backend

=> switch to folder

    > cd backend


=> download libraries

        1) express

            Rest API'S ----  GET,POST,PUT,DELETE,..........


        2) mongoose

            connect to mongodb DataBase

        3) cors

            enable the cors policy


        > yarn add express mongoose cors

                (or)

        > npm i express mongoose cors


=> prepare model

        +++++++++++++++++++++++++++++++++++++
        backend
              model
                 product.js
        ++++++++++++++++++++++++++++++++++++

        finally "Product" model is ready


=> prepare the rest api.

    server.js




Day - 4
*******

Develop the Rest API

(Fetch the data from MongoDB DataBase)


Finally Rest API is Ready.


http://localhost:8080/api/products.



> ng new frontend


> cd frontend





Day - 5
*******
start the node server

> cd backend

> node server


test the rest api call with Postman

> http://localhost:8080/api/products


create angular application

> ng new frontend


switch to angular application

> cd frontend


download the node modules

   - angular is component based framework.

   - we can create more than one component.

   - as a angular developer, we can provide Communication between components.

        1) @Input()

        2) @Output()

        3) @ViewChild()

        4) @ViewChildren()

    - Communication between components are difficult, while incresing the complexity of projects.

    - to reduce complexity we have state Management in Angular.

    - we will implement state Management by using NgRx package.



    1) @ngrx/store

    2) @ngrx/effects


    > yarn add @ngrx/store @ngrx/effects

                or

    > npm i @ngrx/store @ngrx/effects


implement the NgRx Architecture
*******************************

=> types

=> actions

=> effects

=> reducer

=> store

=> dispatch

=> subscribe


Day-6
*****

1) create the model based on rest api call.

**************************************
frontend
       src
         app
           HomeModule
                   model
                      product.model.ts
**************************************
    finally "Product" model is ready



2) create the service

*******************************************
frontend
       src
         app
           HomeModule
                services
                    product.service.ts
******************************************
    finally "ProductsService" is ready with "getProducts()"


Day-7
*****

prepare the types


*********************************************
frontend
       src
         app
           HomeModule
                    types
                        product.types.ts
********************************************

    finally following types are ready.

    1) PRODUCTS_LIST

    2) PRODUCTS_LIST_SUCCESS

    3) PRODUCTS_LIST_FAIL


prepare the actions

*************************************************
frontend
       src
         app
           HomeModule
                   actions
                      product.actions.ts
************************************************

    finally following actions are ready.

    1) ProductsList

    2) ProductsListSuccess

    3) ProductsListFail


prepare effects

*******************************************************
frontend
      src
       app
        HomeModule
           effects
              product.effects.ts
*****************************************************


prepare reducer

********************************************************
frontend
      src
        app
          HomeModule
             reducer
                product.reducer.ts
*******************************************************
    finally "ProductReducer" is ready


deploy reducer to store.

***********************************************************
frontend
       src
         app
           HomeModule
               module
                 home.module.ts
***********************************************************


create the selector

**********************************************************
frontend
       src
         app
           HomeModule
                  selector
                     product.selector.ts
**********************************************************

    finally "productsListSelector" is ready


perform "dispatch" and "subscribe" in component

***********************************************************
frontend
       src
         app
           HomeModule
                component
                   home.component.ts
                   home.component.html
***********************************************************

Day-9
******
implement the App Component CSS Design



Day-12
******
create the rating bar component

*********************************************
frontend
       src
         app
            components
                rating.component.ts
                rating.component.html
********************************************


Day-13
******
send "products" array from "HomeScreen" to "Products" component.

//Note : ProductsComponent register in HomeModule
********************************************
frontend
        src
           app
              components
                  products.component.ts
                  product.component.html
*********************************************

Module-2
********

1) test the rest api with Postman

    => http://localhost:8080/api/products/{id}

2) edit the database and enter the "countInStock" field


3) create the model

        ***********************************************************
        frontend
                src
                   app
                      description-module
                                    model
                                        description.model.ts
        ***********************************************************
        finally "DescriptionModel" is ready.



4) create the component

    *****************************************************************************
    frontend
            src
               app
                 description-module
                                component
                                    description.component.ts
                                    description.component.html
    *****************************************************************************


5) create the description-module

        *****************************************************************************
        frontend
            src
               app
                 description-module
                                module
                                    description.module.ts
        ********************************************************************************
            finally "DescriptionModule" is ready



6) navigate from HomeModule to DescriptionModule with "_id"

        app.module.ts

        product.component.ts

        description.component.ts


7) create the service

            *****************************************************************************
            frontend
                src
                   app
                     description-module
                                    service
                                        description.service.ts
            ******************************************************************************
                finally "DescriptionService" is ready with "getProductDetails(-)" function


8) implement the state management

           types
                description.types.ts 

                finally "DESCRIPTION", "DESCRIPTION_SUCCESS" and "DESCRIPTION_FAIL"

            actions
                description.action.ts
                
                finally "description", "descriptionSuccess" and "descriptionFail" actions are ready

            effects
                description.effects.ts

                finally "DescriptionEffects" are ready

            state
                descriptions.state.ts

                finally "DescriptionState" is ready

            reducer
                description.reducer.ts

                finally "descriptionReducer" is ready

            selector
                description.selector.ts

                finally "descriptionSelector" is ready

9) complete the dispatch and subscription in DescriptionComponent





Module3   (CartModule)
*******   ************

1) create the module with CartComponent


*********************************************************************
cart-module
         component
            cart.component.ts
            cart.component.html

         module
            cart.module.ts
*********************************************************************


2) implement the state management


=> http://localhost:8080/api/products/{id}


*****************************************************************
cart-module
        model
           cart.model.ts
                finally "CartModel" is ready

        service
            cart.service.ts
                finally "CartService" is ready with "getProduct(-)" function

        types
            cart.types.ts
                finally "ADD_CART" type is ready

        actions
            cart.actions.ts
                finally "addToCart" action is ready

        effects
            cart.effects.ts

        reducer 
            cart.reducer.ts

        selector
            cart.selector.ts
        
        component
            cart.component.ts
            cart.component.html
***********************************************************************************































































































































































